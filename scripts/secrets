#!/bin/bash

ENV_VARS=(".env" ".registry.env")
for e in ${ENV_VARS[@]}; do
  if [[ -f $e ]]; then
    export $(<$e)
  fi
done

gencerts() {
  CERT_DIR="$1"
  #rm -rf $CERT_DIR
  TMPDATA=secrets.json
  NUM_CERTS=$(jq -r '.TLS | length' $TMPDATA)
  i=0
  while [[ $i -lt $NUM_CERTS ]]; do
    CERT_NAME=$(jq -r ".TLS[$i].name" $TMPDATA)
    mkdir -p $CERT_DIR/$CERT_NAME
    jq -r ".TLS[$i].pem" $TMPDATA > $CERT_DIR/$CERT_NAME/cert.pem
    jq -r ".TLS[$i].key" $TMPDATA > $CERT_DIR/$CERT_NAME/cert.key
    i=$((i+1))
  done
}

loadsecrets() {
  TMPDATA=secrets.json
  vault kv get -address $VAULT_ADDR -format=json $VAULT_PATH | \
    jq '.data.data' \
    > $TMPDATA
  jq -r '.ENV | to_entries|map("\(.key)=\(.value|tostring)")|.[]' $TMPDATA > .registry.env
  gencerts certs
  #rm -r $TMPDATA
}

createsecrets() {
  SECFILE=${1:-"secrets.json"}
  if [[ -f $SECFILE ]]; then
    cat $SECFILE | vault kv put -address $VAULT_ADDR $VAULT_PATH -
  else
    echo $SECFILE does not exist > /dev/stderr
  fi
}

vaultlogin() {
  vault token lookup -address $VAULT_ADDR
  if [[ "$?" -gt 0 ]]; then
    vault login -address $VAULT_ADDR -method=userpass username=$VAULT_USER password=$VAULT_PASS
  fi
}

main() {
  vaultlogin
  case "$1" in
    create) createsecrets $2;;
    load) loadsecrets;;
  esac
}

main "$@"
